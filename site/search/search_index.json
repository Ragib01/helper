{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Ragib Shahriar's Docs Hi there \u270b I am a self-motivated computer programmer || technology enthusiast || Software Engineer || Artificial Intelligence || Django || Laravel \ud83c\udf93 Skills \ud83d\udc47\ud83d\udc47 \ud83d\udc49 Pogramming Language: Python, PHP, Javascript, Matlab \ud83d\udc49 Frameworks: Django, Laravel, React.js, Bootstrap \ud83d\udca5 Data Science: data analysis, machine learning, deep learning, Natural Language Processing \ud83d\udc49 Others: Linux, AWS \ud83d\udc68\u200d\ud83d\udcbb All of my projects are available \ud83d\udc49 here My GitHub Status Thanks! \u2764\ufe0f","title":"Home"},{"location":"#hi-there","text":"I am a self-motivated computer programmer || technology enthusiast || Software Engineer || Artificial Intelligence || Django || Laravel \ud83c\udf93 Skills \ud83d\udc47\ud83d\udc47 \ud83d\udc49 Pogramming Language: Python, PHP, Javascript, Matlab \ud83d\udc49 Frameworks: Django, Laravel, React.js, Bootstrap \ud83d\udca5 Data Science: data analysis, machine learning, deep learning, Natural Language Processing \ud83d\udc49 Others: Linux, AWS \ud83d\udc68\u200d\ud83d\udcbb All of my projects are available \ud83d\udc49 here","title":"Hi there \u270b"},{"location":"#my-github-status","text":"Thanks! \u2764\ufe0f","title":"My GitHub Status"},{"location":"django/","text":"django.md","title":"Django"},{"location":"git/fatal/","text":"unrelated histories fatal: refusing to merge unrelated histories git pull origin branchname --allow-unrelated-histories","title":"Fatal"},{"location":"git/fatal/#unrelated-histories","text":"fatal: refusing to merge unrelated histories git pull origin branchname --allow-unrelated-histories","title":"unrelated histories"},{"location":"laravel/controller/","text":"Module namespace App\\Http\\Controllers\\Module; use App\\Models\\Module\\Model; use Illuminate\\Http\\Request; use App\\Http\\Controllers\\Controller; Index public function index() { $var = Slider::customPaginate(); return response()->json($var); } Store public function store(Request $request) { $var = new Model; $var->title = $request['title']; $var->created_by = config()->get('global.user_id'); if($var->save()){ return response()->json([ 'message' => 'New var added successfully', 'data' => $var ],201); } } Update public function update(Request $request) { $var = Model::find($request['id']); $var->title = $request['title']; $var->updated_by = config()->get('global.user_id'); if($var->update()){ return response()->json([ 'message' => 'Successfully updated', 'data' => $var ],201); }else{ return response()->json([ 'message' => 'Something went wrong!' ], 400); } } Delete public function destroy(int $id, Model $model) { $del = Model::find($id); if($del){ $del->delete(); return response()->json(['message' =>'successfully deleted ..'],200); }else{ return response()->json(['message' => '.. to be deleted not found'],404); } }","title":"Controller"},{"location":"laravel/controller/#module","text":"namespace App\\Http\\Controllers\\Module; use App\\Models\\Module\\Model; use Illuminate\\Http\\Request; use App\\Http\\Controllers\\Controller;","title":"Module"},{"location":"laravel/controller/#index","text":"public function index() { $var = Slider::customPaginate(); return response()->json($var); }","title":"Index"},{"location":"laravel/controller/#store","text":"public function store(Request $request) { $var = new Model; $var->title = $request['title']; $var->created_by = config()->get('global.user_id'); if($var->save()){ return response()->json([ 'message' => 'New var added successfully', 'data' => $var ],201); } }","title":"Store"},{"location":"laravel/controller/#update","text":"public function update(Request $request) { $var = Model::find($request['id']); $var->title = $request['title']; $var->updated_by = config()->get('global.user_id'); if($var->update()){ return response()->json([ 'message' => 'Successfully updated', 'data' => $var ],201); }else{ return response()->json([ 'message' => 'Something went wrong!' ], 400); } }","title":"Update"},{"location":"laravel/controller/#delete","text":"public function destroy(int $id, Model $model) { $del = Model::find($id); if($del){ $del->delete(); return response()->json(['message' =>'successfully deleted ..'],200); }else{ return response()->json(['message' => '.. to be deleted not found'],404); } }","title":"Delete"},{"location":"laravel/database/","text":"migration php artisan migrate:refresh --path=/database/migrations/create_table_name.php create table CREATE TABLE failed_jobs ( id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, uuid VARCHAR(256) NOT NULL UNIQUE, connection TEXT NULL, queue TEXT NULL, payload LONGTEXT NULL, exception LONGTEXT NULL )","title":"Database"},{"location":"laravel/database/#migration","text":"php artisan migrate:refresh --path=/database/migrations/create_table_name.php","title":"migration"},{"location":"laravel/database/#create-table","text":"CREATE TABLE failed_jobs ( id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, uuid VARCHAR(256) NOT NULL UNIQUE, connection TEXT NULL, queue TEXT NULL, payload LONGTEXT NULL, exception LONGTEXT NULL )","title":"create table"},{"location":"laravel/laravel-queue/","text":"main class https://github.com/laravel/framework/blob/7212b1e9620c36bf806e444f6931cf5f379c68ff/src/Illuminate/Queue/DatabaseQueue.php#L170","title":"laravel"},{"location":"laravel/laravel-queue/#main-class","text":"https://github.com/laravel/framework/blob/7212b1e9620c36bf806e444f6931cf5f379c68ff/src/Illuminate/Queue/DatabaseQueue.php#L170","title":"main class"},{"location":"laravel/lumen-queue/","text":"SendEmail.php <?php namespace App\\Mail; use Illuminate\\Bus\\Queueable; use Illuminate\\Contracts\\Queue\\ShouldQueue; use Illuminate\\Mail\\Mailable; use Illuminate\\Queue\\SerializesModels; class SendEmail extends Mailable { use Queueable, SerializesModels; public $subject, $short_name, $body; public function __construct($subject, $short_name, $body) { $this->subject = $subject; $this->short_name = $short_name; $this->body = $body; } public function build() { return $this->from(env('COMPANY_NOREPLY_ACCOUNT'), $this->short_name) ->subject($this->subject) ->view('mail.main', ['html' => $this->body]); } } SendMailJob.php <?php namespace App\\Jobs; use Illuminate\\Support\\Facades\\Log; use Illuminate\\Support\\Facades\\Mail; use App\\Mail\\SendEmail; class SendMailJob extends Job { protected $to, $subject, $short_name, $body; public function __construct($subject, $short_name, $to, $body) { $this->subject = $subject; $this->short_name = $short_name; $this->body = $body; $this->to = $to; } public function handle() { $email = new SendEmail($this->subject, $this->short_name, $this->body); Mail::to($this->to)->send($email); } } Controller $data = [ 'subject' => 'Invitation from Company_name', 'short_name' => 'Company_name', 'body' => 'You are invited from Company_name for joining '.$batch->course_alias_name_en.' For join click the link </br>'.$link, 'to' => $email_or_phone, 'link' => $link, 'message' => 'You are invited from Company_name for joining '.$batch->course_alias_name_en.' For join click the link '.$link ]; if(is_numeric($email_or_phone)){ dispatch(new SendSmsJob($data['to'], $data['message'])); }else{ dispatch(new SendMailJob($data['subject'], $data['short_name'], $data['to'], $data['body'])); }","title":"lumen"},{"location":"laravel/lumen-queue/#sendemailphp","text":"<?php namespace App\\Mail; use Illuminate\\Bus\\Queueable; use Illuminate\\Contracts\\Queue\\ShouldQueue; use Illuminate\\Mail\\Mailable; use Illuminate\\Queue\\SerializesModels; class SendEmail extends Mailable { use Queueable, SerializesModels; public $subject, $short_name, $body; public function __construct($subject, $short_name, $body) { $this->subject = $subject; $this->short_name = $short_name; $this->body = $body; } public function build() { return $this->from(env('COMPANY_NOREPLY_ACCOUNT'), $this->short_name) ->subject($this->subject) ->view('mail.main', ['html' => $this->body]); } }","title":"SendEmail.php"},{"location":"laravel/lumen-queue/#sendmailjobphp","text":"<?php namespace App\\Jobs; use Illuminate\\Support\\Facades\\Log; use Illuminate\\Support\\Facades\\Mail; use App\\Mail\\SendEmail; class SendMailJob extends Job { protected $to, $subject, $short_name, $body; public function __construct($subject, $short_name, $to, $body) { $this->subject = $subject; $this->short_name = $short_name; $this->body = $body; $this->to = $to; } public function handle() { $email = new SendEmail($this->subject, $this->short_name, $this->body); Mail::to($this->to)->send($email); } }","title":"SendMailJob.php"},{"location":"laravel/lumen-queue/#controller","text":"$data = [ 'subject' => 'Invitation from Company_name', 'short_name' => 'Company_name', 'body' => 'You are invited from Company_name for joining '.$batch->course_alias_name_en.' For join click the link </br>'.$link, 'to' => $email_or_phone, 'link' => $link, 'message' => 'You are invited from Company_name for joining '.$batch->course_alias_name_en.' For join click the link '.$link ]; if(is_numeric($email_or_phone)){ dispatch(new SendSmsJob($data['to'], $data['message'])); }else{ dispatch(new SendMailJob($data['subject'], $data['short_name'], $data['to'], $data['body'])); }","title":"Controller"},{"location":"laravel/mail/","text":"bcc $emails = ['myoneemail@esomething.com', 'myother@esomething.com','myother2@esomething.com']; Mail::send('emails.welcome', [], function($message) use ($emails) { $message->to($emails)->subject('This is test e-mail'); }); var_dump( Mail:: failures()); exit;","title":"Mail"},{"location":"laravel/mail/#bcc","text":"$emails = ['myoneemail@esomething.com', 'myother@esomething.com','myother2@esomething.com']; Mail::send('emails.welcome', [], function($message) use ($emails) { $message->to($emails)->subject('This is test e-mail'); }); var_dump( Mail:: failures()); exit;","title":"bcc"},{"location":"laravel/params/","text":"Get Key-Value from route $type = (isset($request['type']))?$request['type']:null;","title":"Params"},{"location":"laravel/params/#get-key-value-from-route","text":"$type = (isset($request['type']))?$request['type']:null;","title":"Get Key-Value from route"},{"location":"laravel/routes/","text":"$router->group(['middleware' => ['authUser','auth:api']], function () use ($router) { $router->group(['prefix' => 'event-user'],function() use ($router){ $router->get('/all', 'EventUserController@index'); $router->post('/create', 'EventUserController@store'); $router->put('/update', 'EventUserController@update'); $router->delete('/{id}', 'EventUserController@destroy'); }); });","title":"Route"},{"location":"server/port/","text":"Run in different port mkdocs serve -a localhost:8001","title":"Port"},{"location":"server/port/#run-in-different-port","text":"mkdocs serve -a localhost:8001","title":"Run in different port"}]}